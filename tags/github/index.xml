<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github on CodeFIct</title>
    <link>https://codefict.dev/tags/github/</link>
    <description>Recent content in github on CodeFIct</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Sun, 08 Dec 2019 16:40:00 +0900</lastBuildDate><atom:link href="https://codefict.dev/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub Actions로 Hugo 블로그 배포하기</title>
      <link>https://codefict.dev/posts/2019/12/hugo-github-actions/</link>
      <pubDate>Sun, 08 Dec 2019 16:40:00 +0900</pubDate>
      
      <guid>https://codefict.dev/posts/2019/12/hugo-github-actions/</guid>
      <description>최근 GitHub Actions를 써봤는데 생각보다 괜찮아서 블로그 배포 방식도 이걸로 바꾸기로 했다. 기존에는 travis-ci를 사용했다. 아래와 같은 흐름으로 배포된다.
 vazrupe/blog master 브런치가 푸시된다. git checkout한다. 테마를 submodule로 사용하기 때문에 --recursive 옵션을 설정해야 한다. go get으로 hugo를 설치한다. hugo 명령으로 블로그를 빌드한다. vazrupe/vazrupe.github.io의 master 브런치에 public 디렉토리 내용을 업데이트 한다.  위 방법은 go get으로 설치하기 때문에 hugo의 버전을 지정할 수 없었는데, 마침 특정 hugo 버전을 사용할 수 있게 해주는 액션이 있었다.</description>
    </item>
    
    <item>
      <title>Jenkins에 GitHub Hook 적용하기</title>
      <link>https://codefict.dev/posts/2016/10/jenkins-github-hook/</link>
      <pubDate>Sat, 01 Oct 2016 18:39:00 +0900</pubDate>
      
      <guid>https://codefict.dev/posts/2016/10/jenkins-github-hook/</guid>
      <description>최근 Tomcat 프로젝트를 하며, Jenkins를 이용한 auto-deployment를 해봤습니다. 이 경험을 바탕으로 Jenkins에 GitHub Hook를 적용하는 방법을 적어보고자 합니다.
먼저 Jenkins Job에서 사용할 ssh키를 생성합니다. (Generating a new SSH key and adding it to the ssh-agent) 생성할 때 passphrase를 묻는데 ssh키에 패스워드를 거는 겁니다. 필요하다 생각된다면, 적어도 무방합니다. 생성이 완료되면 pub가 붙은 파일과 아닌 파일이 있습니다. pub가 붙은 파일을 GtiHub에 등록하고 아닌 파일을 Jenkins에 등록하게 됩니다.
이제 Jenkins로 가서 Git과 GitHub 플러그인을 설치해줍니다.</description>
    </item>
    
  </channel>
</rss>
