<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on CodeFIct</title>
    <link>https://codefict.dev/tags/python/</link>
    <description>Recent content in python on CodeFIct</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Fri, 03 Mar 2017 20:35:00 +0900</lastBuildDate><atom:link href="https://codefict.dev/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python3에서 함수의 인자 다루기</title>
      <link>https://codefict.dev/posts/2017/03/python-function-parameters/</link>
      <pubDate>Fri, 03 Mar 2017 20:35:00 +0900</pubDate>
      
      <guid>https://codefict.dev/posts/2017/03/python-function-parameters/</guid>
      <description>flask를 써보며 Variable Rules가 어떻게 구현되는지 궁금했었는데, 어제 전문가를 위한 파이썬(루시아누 하말류 저, 강권학 역, 원제: Fluent Python)을 읽고 어떤 방법으로 구현될 수 있는지 알 게 되었습니다.
python에는 inspect라는 라이브러리가 제공된다. 이 라이브러리의 signature를 이용해 어떤 인자가 있는지, 그 인자가 어떤 속성을 가지는지 알 수 있습니다.
from inspect import signature def sample(a, b=10, *args, c=None, **kwargs): pass sig = signature(sample) for param in sig.parameters.values(): pass signature의 프로퍼티 parameters는 각 파라미터가 param_name: inspect.</description>
    </item>
    
    <item>
      <title>Flask를 reverse proxy 서버로 사용하기</title>
      <link>https://codefict.dev/posts/2017/01/flask-reverse-proxy/</link>
      <pubDate>Tue, 24 Jan 2017 00:21:00 +0900</pubDate>
      
      <guid>https://codefict.dev/posts/2017/01/flask-reverse-proxy/</guid>
      <description>지금 만들고 있는 개인 프로젝트는 flask와 angular를 사용한 SPA 기반 프로젝트입니다.
프로젝트를 만들면서 SPA의 ajax 요청을 처리할 데이터가 필요했습니다. angular에서 service라는 기능으로 샘플 데이터를 넣어 테스트해볼 수 있지만, flask에서 전송되는 데이터를 직접 읽고 싶어서 proxy로 사용해 둘을 같이 동작시킬 방법이 없나 찾아보았고(물론 service로 구현하는게 테스트에 좋습니다), stackoverflow에서 requests를 이용해 구현하는 방법을 찾을 수 있었습니다.
제가 적용한 코드는 아래와 같습니다. stackoverflow와는 달리 replace로 포트만 변경합니다. flask의 기본 포트인 5000을 ng serve의 기본 포트인 4200으로 바꿔서 요청을 전송해줍니다.</description>
    </item>
    
  </channel>
</rss>
